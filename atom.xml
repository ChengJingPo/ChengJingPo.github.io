<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iOS记录行</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-02T12:11:31.854Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChengJingPo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>体验神奇的路由方案</title>
    <link href="http://yoursite.com/2019/03/02/%E4%BD%93%E9%AA%8C%E7%A5%9E%E5%A5%87%E7%9A%84%E8%B7%AF%E7%94%B1%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2019/03/02/体验神奇的路由方案/</id>
    <published>2019-03-02T08:04:18.000Z</published>
    <updated>2019-03-02T12:11:31.854Z</updated>
    
    <content type="html"><![CDATA[<h4 id="提示：消息转发有2种方法："><a href="#提示：消息转发有2种方法：" class="headerlink" title="(提示：消息转发有2种方法："></a>(提示：消息转发有2种方法：</h4><ul><li>方法一：通过performSelector: withObject:该方法进行转发，但时其只能处理SEL对应方法的返回值是对象；</li><li>方法二：通过NSInvocation进行转发，其优点是可以处理SEL对应方法的返回值是非对象的情况。</li></ul><h3 id="关于iOS的路由方案，有名的如：蘑菇街的路由方案，本文是借助于命令模式（即target-action-实现的"><a href="#关于iOS的路由方案，有名的如：蘑菇街的路由方案，本文是借助于命令模式（即target-action-实现的" class="headerlink" title="关于iOS的路由方案，有名的如：蘑菇街的路由方案，本文是借助于命令模式（即target-action)实现的"></a>关于iOS的路由方案，有名的如：蘑菇街的路由方案，本文是借助于命令模式（即target-action)实现的</h3><p>方案一：仅使用performSelector: withObject: 方法进行操作，具体代码：</p><pre><code>  // 1.获取目标Class targetCls = NSClassFromString(targetName);if (targetCls == nil) {    NSLog(@&quot;目标不存在&quot;);    return nil;}//2.获取actionSEL action = NSSelectorFromString(actionName);if (action == nil) {    NSLog(@&quot;action不存在&quot;);    return nil;}if (![targetCls respondsToSelector:action]) {    NSLog(@&quot;目标找不到对应的方法&quot;);    return nil;}if (isRequiredReturnValue) {    SuppressPerformSelectorLeakWarning(return [targetCls performSelector:action withObject:params]);}else {    SuppressPerformSelectorLeakWarning([targetCls performSelector:action withObject:params]);}return nil;}</code></pre><p>该方法是在CJQMediatorManger+CJQMain.m中进行调用的，如：</p><pre><code>+(UIViewController *)rootTabBarController{                 UIViewController *vc =  [self performTarget:@&quot;CJQMainModuleAPI&quot;                                               action:@&quot;rootTabBarController&quot;                                                                  params:nil isRequiredReturnValue:YES];                 return vc;}</code></pre><p>总结：此方案能实现路由的体验，当是缺点也很明显，当SEL的返回类型是非对象时处理不了，会出现程序崩溃。</p><p>方案二：该方案是在方案一的基础上改进的，能够通过URL：<a href="http://CJQMainModuleAPI/rootTabBarController" target="_blank" rel="external">http://CJQMainModuleAPI/rootTabBarController</a>“ 进行处理。实现代码：</p><pre><code>    //单例   +(instancetype)sharedInstance {       static CJQMediatorManger *mediator;       static dispatch_once_t onceToken;       dispatch_once(&amp;onceToken, ^{           mediator = [[CJQMediatorManger alloc] init];       });       return mediator;    } - (id)openUrl: (NSString *)urlStr WithParams: (NSDictionary *)ExtenParams {     NSURL *url = [NSURL URLWithString:urlStr];     NSMutableDictionary *params = [[NSMutableDictionary alloc] init];    NSString *urlString = [url query];    for (NSString *param in [urlString componentsSeparatedByString:@&quot;&amp;&quot;]) {        NSArray *elts = [param componentsSeparatedByString:@&quot;=&quot;];        if ([elts count] &lt; 2) continue;        id firstEle = [elts firstObject];        id lastEle = [elts lastObject];        if (firstEle &amp;&amp; lastEle) {            [params setValue:lastEle forKey:firstEle];        }     }    NSArray *arrayParams = ExtenParams[@&quot;paramFlag&quot;];    NSDictionary *mutliParams = @{                                  @&quot;params&quot; : params,                                  @&quot;arrayParams&quot;: arrayParams,                                  @&quot;middleClickBlock&quot; :   ExtenParams[@&quot;middleClickBlock&quot;]                                  };    NSString *actionName = [url.path  stringByReplacingOccurrencesOfString:@&quot;/&quot; withString:@&quot;&quot;];   if ([actionName hasPrefix:@&quot;native&quot;]) {       return @(NO);   }   BOOL isRqRetuValue = ExtenParams[@&quot;isRequiredReturnValue&quot;];   id result  = [self performTarget:url.host                          action:actionName                          params:mutliParams                          isRequiredReturnValue:isRqRetuValue];   return result;}   - (id)performTarget: (NSString *)targetName action: (NSString *)actionName params: (id)params isRequiredReturnValue: (BOOL)isRequiredReturnValue {       NSString *targetClassString = [NSString stringWithFormat:@&quot;OCTarget_%@&quot;,targetName];       NSString *actionMethodString = [NSString stringWithFormat:@&quot;action_%@:&quot;,actionName ];       Class targetClass = NSClassFromString(targetClassString);       NSObject *target = [[targetClass alloc] init];       SEL action = NSSelectorFromString(actionMethodString);       if ([target respondsToSelector:action]) {            return [self safePerFormTarget:target                                    action:action                                    params:params                                    isRequiredReturnValue:isRequiredReturnValue];        } else {            SEL action = NSSelectorFromString(@&quot;notFound&quot;);            if ([target respondsToSelector:action]) {                 return [self safePerFormTarget:target                                         action:action                                         params:params                                         isRequiredReturnValue:isRequiredReturnValue];             }else {               return nil;          }  }    } - (id)safePerFormTarget: (NSObject *)target action: (SEL)action params: (id)params isRequiredReturnValue: (BOOL)isRequiredReturnValue {      NSMethodSignature *methodSig = [target methodSignatureForSelector:action];      if (methodSig == nil) {          return nil;      }      const char *returnType = [methodSig methodReturnType];      if (strcmp(returnType, @encode(void)) == 0) {          NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];          [invocation setArgument:&amp;params atIndex:2];          [invocation setTarget:target];          [invocation setSelector:action];          [invocation invoke];          return nil;      }    if (strcmp(returnType, @encode(BOOL)) == 0) {        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];       [invocation setArgument:&amp;params atIndex:2];       [invocation setTarget:target];       [invocation setSelector:action];       [invocation invoke];       NSInteger result = 0;       [invocation getReturnValue:&amp;result];       return @(result);    }   if (strcmp(returnType, @encode(NSInteger)) == 0) {       NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];       [invocation setArgument:&amp;params atIndex:2];       [invocation setTarget:target];       [invocation setSelector:action];       [invocation invoke];      NSInteger result = 0;      [invocation getReturnValue:&amp;result];      return @(result);   }  if (strcmp(returnType, @encode(NSUInteger)) == 0) {      NSInvocation *invocaton = [NSInvocation invocationWithMethodSignature:methodSig];      [invocaton setArgument:&amp;params atIndex:2];      [invocaton setTarget:target];      [invocaton setSelector:action];      [invocaton invoke];     NSInteger result = 0;     [invocaton getReturnValue:&amp;result];     return @(result);  } if (strcmp(returnType, @encode(CGFloat)) ==0) {     NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];     [invocation setArgument:&amp;params atIndex:2];     [invocation setTarget:target];     [invocation setSelector:action];     [invocation invoke];     NSUInteger restult = 0;     [invocation getReturnValue:&amp;restult];     return @(restult);  } if (isRequiredReturnValue) {      SuppressPerformSelectorLeakWarning(return [target performSelector:action withObject:params]);  }else {     SuppressPerformSelectorLeakWarning([target performSelector:action withObject:params]);     } return nil; }</code></pre><p>通过URL处理的方法（openUrl:  WithParams:）是在CJQMediatorManger+CJQMain.m中进行调用的，如：</p><pre><code>+ (UIViewController *)rootTabBarController {             UIViewController *vc = [[CJQMediatorManger sharedInstance] openUrl:@&quot;http://CJQMainModuleAPI/rootTabBarController&quot;                                                                         WithParams:@{ @&quot;isRequiredReturnValue&quot; :@(YES),                                                                                      @&quot;paramFlag&quot;: @&quot;&quot;,                                                                                      @&quot;middleClickBlock&quot; : @&quot;&quot;} ];              return vc;     }</code></pre><p>更详细的，请参考：<a href="https://github.com/ChengJingPo/CJQFM" target="_blank" rel="external">demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;提示：消息转发有2种方法：&quot;&gt;&lt;a href=&quot;#提示：消息转发有2种方法：&quot; class=&quot;headerlink&quot; title=&quot;(提示：消息转发有2种方法：&quot;&gt;&lt;/a&gt;(提示：消息转发有2种方法：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;方法一：通过performSelec
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>生成带有子库的库</title>
    <link href="http://yoursite.com/2019/03/02/%E7%94%9F%E6%88%90%E5%B8%A6%E6%9C%89%E5%AD%90%E5%BA%93%E7%9A%84%E5%BA%93/"/>
    <id>http://yoursite.com/2019/03/02/生成带有子库的库/</id>
    <published>2019-03-02T06:40:31.000Z</published>
    <updated>2019-03-02T07:45:48.921Z</updated>
    
    <content type="html"><![CDATA[<p>通过该文<a href="https://chengjingpo.github.io/2019/02/18/github%E4%B8%8A%E9%80%9A%E8%BF%87Cocoapods%E6%9E%84%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93/" target="_blank" rel="external">github上通过Cocoapods构建属于自己的库</a>创建属于自己的库时，创建成功后，通过pod加载到对应工程时所有的文件都会加载，即：<img src="http://pn44hg1cy.bkt.clouddn.com/15515123279232.jpg" alt=""><br>。但有时项目只需要其中某些文件，多余的其他文件没有用。针对这种情况可以通过建立子库的形式来解决该问题。建立子库需要做进一步操作，通过修改您创建库.spec 就行。即修改：<img src="http://pn44hg1cy.bkt.clouddn.com/15515116426884.jpg" alt=""> 以及podfile中直接加载对应的子库 ：pod ‘CJPBaseComponents/Category’, ‘~&gt; 0.2.1’。 重新加载后结果如下：<br><img src="http://pn44hg1cy.bkt.clouddn.com/15515119335462.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过该文&lt;a href=&quot;https://chengjingpo.github.io/2019/02/18/github%E4%B8%8A%E9%80%9A%E8%BF%87Cocoapods%E6%9E%84%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%8
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github上通过Cocoapods构建属于自己的库</title>
    <link href="http://yoursite.com/2019/02/18/github%E4%B8%8A%E9%80%9A%E8%BF%87Cocoapods%E6%9E%84%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93/"/>
    <id>http://yoursite.com/2019/02/18/github上通过Cocoapods构建属于自己的库/</id>
    <published>2019-02-18T10:08:00.000Z</published>
    <updated>2019-02-19T01:13:48.359Z</updated>
    
    <content type="html"><![CDATA[<p>1.进入目标文件，即cd 到目标文件夹，通过命令pod lib create 库名 创建库<br><img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_25.png" alt="Snip20190218_25"></p><p>2.通过命令：git remote add origin <a href="https://github.com/xxxx/xxxx" target="_blank" rel="external">https://github.com/xxxx/xxxx</a> 和远程库进行连接<br><img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_26.png" alt="Snip20190218_26"><br>3.<br>  3.1通过命令:git status  查看状态<img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_27.png" alt="Snip20190218_27"></p><p>  3.2通过命令:git add .   添加变化<br>  <img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_28.png" alt="Snip20190218_28"><br>  3.3通过命令:git commit -m ‘first commit’  提交记录<img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_29.png" alt="Snip20190218_29"></p><p>  3.4通过命令:git push -u origin master     推送到远程<img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_30.png" alt="Snip20190218_30"></p><p>4.打标签<br>  4.1通过命令:git tag  先查看下已有标签<br>  4.2通过命令:git tag ‘0.x.x’  进行本地打标签<br>  4.3通过命令:git push –tags  已打的标签同步提交到远程库<br>  <img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_31.png" alt="Snip20190218_31"></p><p>5.修改.podspec文件参数<br>   修改完后保存下，再进行步骤3操作的<br>   <img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_32.png" alt="Snip20190218_32"></p><p>6.提交到远程库<br>  6.1通过命令:pod lib lint 进行本地验证<img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_23.png" alt="Snip20190218_23"></p><p>  6.2通过命令:pod spec lint 进行远程验证<img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_22.png" alt="Snip20190218_22"></p><p>  6.3通过命令:pod trunk push xxxx.podspec 进行远程提交!<br><img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_14.png" alt="Snip20190218_14"></p><p>7.库查询验证<br>  通过命令：pod search xxxx.podspec 进行查询<br>  <img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_21.png" alt="Snip20190218_21"><br><img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_16.png" alt="Snip20190218_16"> 之后您可以您就可以像使用AFN一样在工程中使用您的库了。</p><h2 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h2><p>在第一次向远程提交（即：git push -u origin master）时遇到以下问题：<br><img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_33.png" alt="Snip20190218_33"><br>1）解决方案：<br>（1）通过：git status 查看状态<br><img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_35.png" alt="Snip20190218_35"><br>（2）通过：git mergetool 进行合并<br><img src="http://pn44hg1cy.bkt.clouddn.com/Snip20190218_36.png" alt="Snip20190218_36"><br>（3）合并后再提交就OK了，具体看下3.4。<br><a href=""></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.进入目标文件，即cd 到目标文件夹，通过命令pod lib create 库名 创建库&lt;br&gt;&lt;img src=&quot;http://pn44hg1cy.bkt.clouddn.com/Snip20190218_25.png&quot; alt=&quot;Snip20190218_25&quot;&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式认知</title>
    <link href="http://yoursite.com/2019/02/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AE%A4%E7%9F%A5/"/>
    <id>http://yoursite.com/2019/02/17/设计模式认知/</id>
    <published>2019-02-17T14:27:18.000Z</published>
    <updated>2019-02-17T14:27:18.283Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言的温故</title>
    <link href="http://yoursite.com/2019/02/13/C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B8%A9%E6%95%85/"/>
    <id>http://yoursite.com/2019/02/13/C语言的温故/</id>
    <published>2019-02-13T15:39:13.000Z</published>
    <updated>2019-02-13T15:39:13.462Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>swift回顾与总结</title>
    <link href="http://yoursite.com/2019/02/11/swift%E5%9B%9E%E9%A1%BE%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/02/11/swift回顾与总结/</id>
    <published>2019-02-11T15:19:56.000Z</published>
    <updated>2019-02-11T15:19:56.319Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>209</title>
    <link href="http://yoursite.com/2019/02/09/209/"/>
    <id>http://yoursite.com/2019/02/09/209/</id>
    <published>2019-02-09T02:37:14.000Z</published>
    <updated>2019-02-09T02:37:14.054Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>207</title>
    <link href="http://yoursite.com/2019/02/07/207/"/>
    <id>http://yoursite.com/2019/02/07/207/</id>
    <published>2019-02-07T02:29:49.000Z</published>
    <updated>2019-02-07T02:29:49.429Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>129</title>
    <link href="http://yoursite.com/2019/01/30/129/"/>
    <id>http://yoursite.com/2019/01/30/129/</id>
    <published>2019-01-30T09:45:52.000Z</published>
    <updated>2019-01-30T09:45:52.648Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>128</title>
    <link href="http://yoursite.com/2019/01/28/128/"/>
    <id>http://yoursite.com/2019/01/28/128/</id>
    <published>2019-01-28T15:51:33.000Z</published>
    <updated>2019-01-28T15:51:33.118Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>126</title>
    <link href="http://yoursite.com/2019/01/26/126/"/>
    <id>http://yoursite.com/2019/01/26/126/</id>
    <published>2019-01-26T15:59:48.000Z</published>
    <updated>2019-01-26T15:59:48.306Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>1124</title>
    <link href="http://yoursite.com/2019/01/24/1124/"/>
    <id>http://yoursite.com/2019/01/24/1124/</id>
    <published>2019-01-24T15:35:53.000Z</published>
    <updated>2019-01-24T15:35:53.994Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>120</title>
    <link href="http://yoursite.com/2019/01/21/120/"/>
    <id>http://yoursite.com/2019/01/21/120/</id>
    <published>2019-01-20T16:35:57.000Z</published>
    <updated>2019-01-20T16:35:57.335Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>19118</title>
    <link href="http://yoursite.com/2019/01/18/19118/"/>
    <id>http://yoursite.com/2019/01/18/19118/</id>
    <published>2019-01-18T15:38:23.000Z</published>
    <updated>2019-01-18T15:38:23.191Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>134590</title>
    <link href="http://yoursite.com/2019/01/10/134590/"/>
    <id>http://yoursite.com/2019/01/10/134590/</id>
    <published>2019-01-10T06:09:03.000Z</published>
    <updated>2019-01-10T06:09:04.009Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>12345</title>
    <link href="http://yoursite.com/2019/01/07/12345/"/>
    <id>http://yoursite.com/2019/01/07/12345/</id>
    <published>2019-01-06T18:05:06.000Z</published>
    <updated>2019-01-06T18:05:06.110Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>1234</title>
    <link href="http://yoursite.com/2019/01/07/1234/"/>
    <id>http://yoursite.com/2019/01/07/1234/</id>
    <published>2019-01-06T18:04:54.000Z</published>
    <updated>2019-01-06T18:04:54.115Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git在使用过程中遇到的问题收集</title>
    <link href="http://yoursite.com/2019/01/07/git%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2019/01/07/git在使用过程中遇到的问题收集/</id>
    <published>2019-01-06T18:02:45.000Z</published>
    <updated>2019-02-27T16:12:16.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-在使用命令：git-push-u-origin-master-时遇到如下问题："><a href="#1-在使用命令：git-push-u-origin-master-时遇到如下问题：" class="headerlink" title="1.在使用命令：git push -u origin master 时遇到如下问题："></a>1.在使用命令：git push -u origin master 时遇到如下问题：</h2><p><img src="http://pn44hg1cy.bkt.clouddn.com/15512461032954.jpg" alt=""><br>查询资料，需使用命令：git remote add origin git@github.com:自己github名字/项目名字.git ，直接通过，再次推送（git push -u origin master）时，遇到新的问题：<br><img src="http://pn44hg1cy.bkt.clouddn.com/15512465068413.jpg" alt=""><br>该问题提示在推送前需要先进行拉取，通过命令 ：git pull origin master –allow-unrelated-histories 进行拉取后再进行推送，推送成功。<br><img src="http://pn44hg1cy.bkt.clouddn.com/15512467618299.jpg" alt=""></p><h2 id="2-在使用命令：pod-repo-push-xxx-spec-时遇到如下问题："><a href="#2-在使用命令：pod-repo-push-xxx-spec-时遇到如下问题：" class="headerlink" title="2.在使用命令：pod repo push xxx.spec 时遇到如下问题："></a>2.在使用命令：pod repo push xxx.spec 时遇到如下问题：</h2><p><img src="http://pn44hg1cy.bkt.clouddn.com/15512827975813.jpg" alt=""><br>当时检查发现远程仓库中.spec文件和本地的不一致，通过命令：git push origin master 后通过命令：pod trunk push xxx.spec 提交成功。<br><img src="http://pn44hg1cy.bkt.clouddn.com/15512830008543.jpg" alt=""><br><img src="http://pn44hg1cy.bkt.clouddn.com/15512832571505.jpg" alt=""></p><h2 id="3-在使用命令：pod-lib-lint-–no-clean-时遇到如下问题："><a href="#3-在使用命令：pod-lib-lint-–no-clean-时遇到如下问题：" class="headerlink" title="3.在使用命令：pod lib lint –no-clean 时遇到如下问题："></a>3.在使用命令：pod lib lint –no-clean 时遇到如下问题：</h2><p><img src="http://pn44hg1cy.bkt.clouddn.com/15512836143985.jpg" alt=""><br>当时查询工程文件发现有黄色❗️的提示，点击提示xcode自动修复后 ，再使用命令：pod lib lint 本地验证直接验证通过。<br><img src="http://pn44hg1cy.bkt.clouddn.com/15512839006887.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-在使用命令：git-push-u-origin-master-时遇到如下问题：&quot;&gt;&lt;a href=&quot;#1-在使用命令：git-push-u-origin-master-时遇到如下问题：&quot; class=&quot;headerlink&quot; title=&quot;1.在使用命令：gi
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>about</title>
    <link href="http://yoursite.com/2018/10/17/about/"/>
    <id>http://yoursite.com/2018/10/17/about/</id>
    <published>2018-10-17T08:58:04.000Z</published>
    <updated>2018-10-17T08:58:04.030Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>表单验证</title>
    <link href="http://yoursite.com/2018/10/17/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2018/10/17/表单验证/</id>
    <published>2018-10-17T08:48:03.000Z</published>
    <updated>2018-10-17T09:02:05.694Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="表格" scheme="http://yoursite.com/tags/%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
</feed>
