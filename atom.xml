<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iOS记录行</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-02T12:17:01.104Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChengJingPo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>体验神奇的路由方案</title>
    <link href="http://yoursite.com/2019/03/02/%E4%BD%93%E9%AA%8C%E7%A5%9E%E5%A5%87%E7%9A%84%E8%B7%AF%E7%94%B1%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2019/03/02/体验神奇的路由方案/</id>
    <published>2019-03-02T08:04:18.000Z</published>
    <updated>2019-03-02T12:17:01.104Z</updated>
    
    <content type="html"><![CDATA[<p>(提示：消息转发有2种方法：</p><ul><li>方法一：通过performSelector: withObject:该方法进行转发，但时其只能处理SEL对应方法的返回值是对象；</li><li>方法二：通过NSInvocation进行转发，其优点是可以处理SEL对应方法的返回值是非对象的情况。)</li></ul><h3 id="关于iOS的路由方案，有名的如：蘑菇街的路由方案，本文是借助于命令模式（即target-action-实现的"><a href="#关于iOS的路由方案，有名的如：蘑菇街的路由方案，本文是借助于命令模式（即target-action-实现的" class="headerlink" title="关于iOS的路由方案，有名的如：蘑菇街的路由方案，本文是借助于命令模式（即target-action)实现的"></a>关于iOS的路由方案，有名的如：蘑菇街的路由方案，本文是借助于命令模式（即target-action)实现的</h3><p>方案一：仅使用performSelector: withObject: 方法进行操作，具体代码：</p><pre><code>  // 1.获取目标Class targetCls = NSClassFromString(targetName);if (targetCls == nil) {    NSLog(@&quot;目标不存在&quot;);    return nil;}//2.获取actionSEL action = NSSelectorFromString(actionName);if (action == nil) {    NSLog(@&quot;action不存在&quot;);    return nil;}if (![targetCls respondsToSelector:action]) {    NSLog(@&quot;目标找不到对应的方法&quot;);    return nil;}if (isRequiredReturnValue) {    SuppressPerformSelectorLeakWarning(return [targetCls performSelector:action withObject:params]);}else {    SuppressPerformSelectorLeakWarning([targetCls performSelector:action withObject:params]);}return nil;}</code></pre><p>该方法是在CJQMediatorManger+CJQMain.m中进行调用的，如：</p><pre><code>+(UIViewController *)rootTabBarController{                 UIViewController *vc =  [self performTarget:@&quot;CJQMainModuleAPI&quot;                                               action:@&quot;rootTabBarController&quot;                                                                  params:nil isRequiredReturnValue:YES];                 return vc;}</code></pre><p>总结：此方案能实现路由的体验，当是缺点也很明显，当SEL的返回类型是非对象时处理不了，会出现程序崩溃。</p><p>方案二：该方案是在方案一的基础上改进的，能够通过URL：<a href="http://CJQMainModuleAPI/rootTabBarController" target="_blank" rel="external">http://CJQMainModuleAPI/rootTabBarController</a>“ 进行处理。实现代码：</p><pre><code>    //单例   +(instancetype)sharedInstance {       static CJQMediatorManger *mediator;       static dispatch_once_t onceToken;       dispatch_once(&amp;onceToken, ^{           mediator = [[CJQMediatorManger alloc] init];       });       return mediator;    } - (id)openUrl: (NSString *)urlStr WithParams: (NSDictionary *)ExtenParams {     NSURL *url = [NSURL URLWithString:urlStr];     NSMutableDictionary *params = [[NSMutableDictionary alloc] init];    NSString *urlString = [url query];    for (NSString *param in [urlString componentsSeparatedByString:@&quot;&amp;&quot;]) {        NSArray *elts = [param componentsSeparatedByString:@&quot;=&quot;];        if ([elts count] &lt; 2) continue;        id firstEle = [elts firstObject];        id lastEle = [elts lastObject];        if (firstEle &amp;&amp; lastEle) {            [params setValue:lastEle forKey:firstEle];        }     }    NSArray *arrayParams = ExtenParams[@&quot;paramFlag&quot;];    NSDictionary *mutliParams = @{                                  @&quot;params&quot; : params,                                  @&quot;arrayParams&quot;: arrayParams,                                  @&quot;middleClickBlock&quot; :   ExtenParams[@&quot;middleClickBlock&quot;]                                  };    NSString *actionName = [url.path  stringByReplacingOccurrencesOfString:@&quot;/&quot; withString:@&quot;&quot;];   if ([actionName hasPrefix:@&quot;native&quot;]) {       return @(NO);   }   BOOL isRqRetuValue = ExtenParams[@&quot;isRequiredReturnValue&quot;];   id result  = [self performTarget:url.host                          action:actionName                          params:mutliParams                          isRequiredReturnValue:isRqRetuValue];   return result;}   - (id)performTarget: (NSString *)targetName action: (NSString *)actionName params: (id)params isRequiredReturnValue: (BOOL)isRequiredReturnValue {       NSString *targetClassString = [NSString stringWithFormat:@&quot;OCTarget_%@&quot;,targetName];       NSString *actionMethodString = [NSString stringWithFormat:@&quot;action_%@:&quot;,actionName ];       Class targetClass = NSClassFromString(targetClassString);       NSObject *target = [[targetClass alloc] init];       SEL action = NSSelectorFromString(actionMethodString);       if ([target respondsToSelector:action]) {            return [self safePerFormTarget:target                                    action:action                                    params:params                                    isRequiredReturnValue:isRequiredReturnValue];        } else {            SEL action = NSSelectorFromString(@&quot;notFound&quot;);            if ([target respondsToSelector:action]) {                 return [self safePerFormTarget:target                                         action:action                                         params:params                                         isRequiredReturnValue:isRequiredReturnValue];             }else {               return nil;          }  }    } - (id)safePerFormTarget: (NSObject *)target action: (SEL)action params: (id)params isRequiredReturnValue: (BOOL)isRequiredReturnValue {      NSMethodSignature *methodSig = [target methodSignatureForSelector:action];      if (methodSig == nil) {          return nil;      }      const char *returnType = [methodSig methodReturnType];      if (strcmp(returnType, @encode(void)) == 0) {          NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];          [invocation setArgument:&amp;params atIndex:2];          [invocation setTarget:target];          [invocation setSelector:action];          [invocation invoke];          return nil;      }    if (strcmp(returnType, @encode(BOOL)) == 0) {        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];       [invocation setArgument:&amp;params atIndex:2];       [invocation setTarget:target];       [invocation setSelector:action];       [invocation invoke];       NSInteger result = 0;       [invocation getReturnValue:&amp;result];       return @(result);    }   if (strcmp(returnType, @encode(NSInteger)) == 0) {       NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];       [invocation setArgument:&amp;params atIndex:2];       [invocation setTarget:target];       [invocation setSelector:action];       [invocation invoke];      NSInteger result = 0;      [invocation getReturnValue:&amp;result];      return @(result);   }  if (strcmp(returnType, @encode(NSUInteger)) == 0) {      NSInvocation *invocaton = [NSInvocation invocationWithMethodSignature:methodSig];      [invocaton setArgument:&amp;params atIndex:2];      [invocaton setTarget:target];      [invocaton setSelector:action];      [invocaton invoke];     NSInteger result = 0;     [invocaton getReturnValue:&amp;result];     return @(result);  } if (strcmp(returnType, @encode(CGFloat)) ==0) {     NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];     [invocation setArgument:&amp;params atIndex:2];     [invocation setTarget:target];     [invocation setSelector:action];     [invocation invoke];     NSUInteger restult = 0;     [invocation getReturnValue:&amp;restult];     return @(restult);  } if (isRequiredReturnValue) {      SuppressPerformSelectorLeakWarning(return [target performSelector:action withObject:params]);  }else {     SuppressPerformSelectorLeakWarning([target performSelector:action withObject:params]);     } return nil; }</code></pre><p>通过URL处理的方法（openUrl:  WithParams:）是在CJQMediatorManger+CJQMain.m中进行调用的，如：</p><pre><code>+ (UIViewController *)rootTabBarController {             UIViewController *vc = [[CJQMediatorManger sharedInstance] openUrl:@&quot;http://CJQMainModuleAPI/rootTabBarController&quot;                                                                         WithParams:@{ @&quot;isRequiredReturnValue&quot; :@(YES),                                                                                      @&quot;paramFlag&quot;: @&quot;&quot;,                                                                                      @&quot;middleClickBlock&quot; : @&quot;&quot;} ];              return vc;     }</code></pre><p>更详细的，请参考：<a href="https://github.com/ChengJingPo/CJQFM" target="_blank" rel="external">demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(提示：消息转发有2种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法一：通过performSelector: withObject:该方法进行转发，但时其只能处理SEL对应方法的返回值是对象；&lt;/li&gt;
&lt;li&gt;方法二：通过NSInvocation进行转发，其优点是可以处理SEL对
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>生成带有子库的库</title>
    <link href="http://yoursite.com/2019/03/02/%E7%94%9F%E6%88%90%E5%B8%A6%E6%9C%89%E5%AD%90%E5%BA%93%E7%9A%84%E5%BA%93/"/>
    <id>http://yoursite.com/2019/03/02/生成带有子库的库/</id>
    <published>2019-03-02T06:40:31.000Z</published>
    <updated>2019-05-07T12:53:07.943Z</updated>
    
    <content type="html"><![CDATA[<p>通过该文<a href="https://chengjingpo.github.io/2019/02/18/github%E4%B8%8A%E9%80%9A%E8%BF%87Cocoapods%E6%9E%84%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93/" target="_blank" rel="external">github上通过Cocoapods构建属于自己的库</a>创建属于自己的库时，创建成功后，通过pod加载到对应工程时所有的文件都会加载，即：<img src="http://jpc2018.xyz/15515123279232.jpg" alt=""><br>。但有时项目只需要其中某些文件，多余的其他文件没有用。针对这种情况可以通过建立子库的形式来解决该问题。建立子库需要做进一步操作，通过修改您创建库.spec 就行。即修改：<img src="http://jpc2018.xyz/15515116426884.jpg" alt=""> 以及podfile中直接加载对应的子库 ：pod ‘CJPBaseComponents/Category’, ‘~&gt; 0.2.1’。 重新加载后结果如下：<br><img src="http://jpc2018.xyz/15515119335462.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过该文&lt;a href=&quot;https://chengjingpo.github.io/2019/02/18/github%E4%B8%8A%E9%80%9A%E8%BF%87Cocoapods%E6%9E%84%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%8
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flutter开发环境的搭建</title>
    <link href="http://yoursite.com/2019/02/19/Flutter%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/02/19/Flutter开发环境的搭建/</id>
    <published>2019-02-19T02:57:37.000Z</published>
    <updated>2019-05-07T12:50:46.085Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。 –来源于百度百科</p></blockquote><h4 id="今天开始接触下当下最热的技术：Flutter-先从基本的开发环境的搭建开始："><a href="#今天开始接触下当下最热的技术：Flutter-先从基本的开发环境的搭建开始：" class="headerlink" title="今天开始接触下当下最热的技术：Flutter ,先从基本的开发环境的搭建开始："></a>今天开始接触下当下最热的技术：Flutter ,先从基本的开发环境的搭建开始：</h4><ul><li><p>步骤一：设置Flutter镜像</p><p>此步骤需要先通过如下命令打开.bash_profile 文件</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open .bash_profile</div></pre></td></tr></table></figure><p>并添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</div><div class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</div></pre></td></tr></table></figure><p>然后Command+S 保存起来，再通过如下命令更新.bash_profile文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source .bash_profile</div></pre></td></tr></table></figure><p>（⚠️此镜像是Flutter官方为中国开发者搭建的临时镜像，并不保证一直可使用，但可以通过<a href="https://flutter.dev/community/china" target="_blank" rel="external">Using Flutter in China </a>获取镜像的最新信息）</p><ul><li><p>步骤二：安装Flutter SDK </p><ol><li>首先到<a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=macos" target="_blank" rel="external">Flutter官网</a>下载SDK<br><img src="http://jpc2018.xyz/Snip20190219_8.png" alt=""><br>（我这里下载的是稳定版本，建议下载稳定版本）</li><li><p>下载好SDK后，通过命令解压到想安装到目录，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /Users/cjq/Documents/flutter</div><div class="line">$ unzip ~/Downloads/flutter_macos_v1.2.1-stable.zip</div></pre></td></tr></table></figure><p>或者手动解压到您想要安装到目录</p></li><li><p>继续配置.bash_profile文件（即添加flutter相关工具的路径）<br>需要配置的路径如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> export PATH=&quot;/Users/cjq/Documents/flutter/bin:$PATH&quot;</div><div class="line">（注：此路径/Users/cjq/Documents/flutter --您安装flutter的路径)</div></pre></td></tr></table></figure><p>（ 操作.bash_profile文件同步骤一一样）</p></li></ol></li></ul><ul><li><p>步骤三：iOS开发环境设置</p><ol><li><p>安装Xcode<br>由于Flutter开发要求Xcode版本要求是9.0或者更高版本，所以首先要检查下xcode版本，如果不符合或者没有安装Xcode ,请到Aplle开发者网站下载，已符合版本要求，跳过第一步；</p></li><li><p>配置Xcode命令行工具以使用新安装的Xcode版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</div></pre></td></tr></table></figure><p><img src="http://jpc2018.xyz/15556506231348.jpg" alt=""><br>注：以上路径是对于最新版的Xcode的路径（或只安装了一个Xcode） ，若您需要使用不同版本的Xcode版本，需要指定相应路径</p></li><li><p>同意Xcode许可协议，通过打开一次Xcode或者通过命令实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo xcodebuild -license</div></pre></td></tr></table></figure><p><img src="http://jpc2018.xyz/15556513514573.jpg" alt=""></p></li><li><p>打开iOS模拟器（即准备在iOS模拟器上运行并测试自己写的Flutter应用）<br>通过命令行打开模拟器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ open -a Simulator</div></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>步骤四：测试–创建并运行一个Flutter项目 </p><ol><li><p>通过命令创建一个Flutter项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ flutter create my_app</div></pre></td></tr></table></figure><p><img src="http://jpc2018.xyz/15556530469490.jpg" alt=""></p></li><li><p>运行完上面的命令后，会在当前目录下创建一个名为my_app 的项目，通过以下命令运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd my_app</div><div class="line">$ flutter run</div></pre></td></tr></table></figure></li></ol><p><img src="http://jpc2018.xyz/15556534223348.jpg" alt=""><br>运行结果：<br><img src="http://jpc2018.xyz/15556534811616.jpg" alt=""></p></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。 –来源于百
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github上通过Cocoapods构建属于自己的库</title>
    <link href="http://yoursite.com/2019/02/18/github%E4%B8%8A%E9%80%9A%E8%BF%87Cocoapods%E6%9E%84%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93/"/>
    <id>http://yoursite.com/2019/02/18/github上通过Cocoapods构建属于自己的库/</id>
    <published>2019-02-18T10:08:00.000Z</published>
    <updated>2019-05-07T12:51:56.291Z</updated>
    
    <content type="html"><![CDATA[<p>1.进入目标文件，即cd 到目标文件夹，通过命令pod lib create 库名 创建库<br><img src="http://jpc2018.xyz/Snip20190218_25.png" alt="Snip20190218_25"></p><p>2.通过命令：git remote add origin <a href="https://github.com/xxxx/xxxx" target="_blank" rel="external">https://github.com/xxxx/xxxx</a> 和远程库进行连接<br><img src="http://jpc2018.xyz/Snip20190218_26.png" alt="Snip20190218_26"><br>3.<br>  3.1通过命令:git status  查看状态<img src="http://jpc2018.xyz/Snip20190218_27.png" alt="Snip20190218_27"></p><p>  3.2通过命令:git add .   添加变化<br>  <img src="http://jpc2018.xyz/Snip20190218_28.png" alt="Snip20190218_28"><br>  3.3通过命令:git commit -m ‘first commit’  提交记录<img src="http://jpc2018.xyz/Snip20190218_29.png" alt="Snip20190218_29"></p><p>  3.4通过命令:git push -u origin master     推送到远程<img src="http://jpc2018.xyz/Snip20190218_30.png" alt="Snip20190218_30"></p><p>4.打标签<br>  4.1通过命令:git tag  先查看下已有标签<br>  4.2通过命令:git tag ‘0.x.x’  进行本地打标签<br>  4.3通过命令:git push –tags  已打的标签同步提交到远程库<br>  <img src="http://jpc2018.xyz/Snip20190218_31.png" alt="Snip20190218_31"></p><p>5.修改.podspec文件参数<br>   修改完后保存下，再进行步骤3操作的<br>   <img src="http://jpc2018.xyz/Snip20190218_32.png" alt="Snip20190218_32"></p><p>6.提交到远程库<br>  6.1通过命令:pod lib lint 进行本地验证<img src="http://jpc2018.xyz/Snip20190218_23.png" alt="Snip20190218_23"></p><p>  6.2通过命令:pod spec lint 进行远程验证<img src="http://jpc2018.xyz/Snip20190218_22.png" alt="Snip20190218_22"></p><p>  6.3通过命令:pod trunk push xxxx.podspec 进行远程提交!<br><img src="http://jpc2018.xyz/Snip20190218_14.png" alt="Snip20190218_14"></p><p>7.库查询验证<br>  通过命令：pod search xxxx.podspec 进行查询<br>  <img src="http://jpc2018.xyz/Snip20190218_21.png" alt="Snip20190218_21"><br><img src="http://jpc2018.xyz/Snip20190218_16.png" alt="Snip20190218_16"> 之后您可以您就可以像使用AFN一样在工程中使用您的库了。</p><h2 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h2><p>在第一次向远程提交（即：git push -u origin master）时遇到以下问题：<br><img src="http://jpc2018.xyz/Snip20190218_33.png" alt="Snip20190218_33"><br>1）解决方案：<br>（1）通过：git status 查看状态<br><img src="http://jpc2018.xyz/Snip20190218_35.png" alt="Snip20190218_35"><br>（2）通过：git mergetool 进行合并<br><img src="http://jpc2018.xyz/Snip20190218_36.png" alt="Snip20190218_36"><br>（3）合并后再提交就OK了，具体看下3.4。<br><a href=""></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.进入目标文件，即cd 到目标文件夹，通过命令pod lib create 库名 创建库&lt;br&gt;&lt;img src=&quot;http://jpc2018.xyz/Snip20190218_25.png&quot; alt=&quot;Snip20190218_25&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.通过命令：g
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式认知</title>
    <link href="http://yoursite.com/2019/02/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AE%A4%E7%9F%A5/"/>
    <id>http://yoursite.com/2019/02/17/设计模式认知/</id>
    <published>2019-02-17T14:27:18.000Z</published>
    <updated>2019-02-17T14:27:18.283Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>swift回顾与总结</title>
    <link href="http://yoursite.com/2019/02/11/swift%E5%9B%9E%E9%A1%BE%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/02/11/swift回顾与总结/</id>
    <published>2019-02-11T15:19:56.000Z</published>
    <updated>2019-02-11T15:19:56.319Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>209</title>
    <link href="http://yoursite.com/2019/02/09/209/"/>
    <id>http://yoursite.com/2019/02/09/209/</id>
    <published>2019-02-09T02:37:14.000Z</published>
    <updated>2019-02-09T02:37:14.054Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>207</title>
    <link href="http://yoursite.com/2019/02/07/207/"/>
    <id>http://yoursite.com/2019/02/07/207/</id>
    <published>2019-02-07T02:29:49.000Z</published>
    <updated>2019-02-07T02:29:49.429Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>129</title>
    <link href="http://yoursite.com/2019/01/30/129/"/>
    <id>http://yoursite.com/2019/01/30/129/</id>
    <published>2019-01-30T09:45:52.000Z</published>
    <updated>2019-01-30T09:45:52.648Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>128</title>
    <link href="http://yoursite.com/2019/01/28/128/"/>
    <id>http://yoursite.com/2019/01/28/128/</id>
    <published>2019-01-28T15:51:33.000Z</published>
    <updated>2019-01-28T15:51:33.118Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>126</title>
    <link href="http://yoursite.com/2019/01/26/126/"/>
    <id>http://yoursite.com/2019/01/26/126/</id>
    <published>2019-01-26T15:59:48.000Z</published>
    <updated>2019-01-26T15:59:48.306Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>1124</title>
    <link href="http://yoursite.com/2019/01/24/1124/"/>
    <id>http://yoursite.com/2019/01/24/1124/</id>
    <published>2019-01-24T15:35:53.000Z</published>
    <updated>2019-01-24T15:35:53.994Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>120</title>
    <link href="http://yoursite.com/2019/01/21/120/"/>
    <id>http://yoursite.com/2019/01/21/120/</id>
    <published>2019-01-20T16:35:57.000Z</published>
    <updated>2019-01-20T16:35:57.335Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>19118</title>
    <link href="http://yoursite.com/2019/01/18/19118/"/>
    <id>http://yoursite.com/2019/01/18/19118/</id>
    <published>2019-01-18T15:38:23.000Z</published>
    <updated>2019-01-18T15:38:23.191Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>134590</title>
    <link href="http://yoursite.com/2019/01/10/134590/"/>
    <id>http://yoursite.com/2019/01/10/134590/</id>
    <published>2019-01-10T06:09:03.000Z</published>
    <updated>2019-01-10T06:09:04.009Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>12345</title>
    <link href="http://yoursite.com/2019/01/07/12345/"/>
    <id>http://yoursite.com/2019/01/07/12345/</id>
    <published>2019-01-06T18:05:06.000Z</published>
    <updated>2019-01-06T18:05:06.110Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>1234</title>
    <link href="http://yoursite.com/2019/01/07/1234/"/>
    <id>http://yoursite.com/2019/01/07/1234/</id>
    <published>2019-01-06T18:04:54.000Z</published>
    <updated>2019-01-06T18:04:54.115Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git在使用过程中遇到的问题收集</title>
    <link href="http://yoursite.com/2019/01/07/git%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2019/01/07/git在使用过程中遇到的问题收集/</id>
    <published>2019-01-06T18:02:45.000Z</published>
    <updated>2019-05-07T12:52:23.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-在使用命令：git-push-u-origin-master-时遇到如下问题："><a href="#1-在使用命令：git-push-u-origin-master-时遇到如下问题：" class="headerlink" title="1.在使用命令：git push -u origin master 时遇到如下问题："></a>1.在使用命令：git push -u origin master 时遇到如下问题：</h2><p><img src="http://jpc2018.xyz/15512461032954.jpg" alt=""><br>查询资料，需使用命令：git remote add origin git@github.com:自己github名字/项目名字.git ，直接通过，再次推送（git push -u origin master）时，遇到新的问题：<br><img src="http://jpc2018.xyz/15512465068413.jpg" alt=""><br>该问题提示在推送前需要先进行拉取，通过命令 ：git pull origin master –allow-unrelated-histories 进行拉取后再进行推送，推送成功。<br><img src="http://jpc2018.xyz/15512467618299.jpg" alt=""></p><h2 id="2-在使用命令：pod-repo-push-xxx-spec-时遇到如下问题："><a href="#2-在使用命令：pod-repo-push-xxx-spec-时遇到如下问题：" class="headerlink" title="2.在使用命令：pod repo push xxx.spec 时遇到如下问题："></a>2.在使用命令：pod repo push xxx.spec 时遇到如下问题：</h2><p><img src="http://jpc2018.xyz/15512827975813.jpg" alt=""><br>当时检查发现远程仓库中.spec文件和本地的不一致，通过命令：git push origin master 后通过命令：pod trunk push xxx.spec 提交成功。<br><img src="http://jpc2018.xyz/15512830008543.jpg" alt=""><br><img src="http://jpc2018.xyz/15512832571505.jpg" alt=""></p><h2 id="3-在使用命令：pod-lib-lint-–no-clean-时遇到如下问题："><a href="#3-在使用命令：pod-lib-lint-–no-clean-时遇到如下问题：" class="headerlink" title="3.在使用命令：pod lib lint –no-clean 时遇到如下问题："></a>3.在使用命令：pod lib lint –no-clean 时遇到如下问题：</h2><p><img src="http://jpc2018.xyz/15512836143985.jpg" alt=""><br>当时查询工程文件发现有黄色❗️的提示，点击提示xcode自动修复后 ，再使用命令：pod lib lint 本地验证直接验证通过。<br><img src="http://jpc2018.xyz/15512839006887.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-在使用命令：git-push-u-origin-master-时遇到如下问题：&quot;&gt;&lt;a href=&quot;#1-在使用命令：git-push-u-origin-master-时遇到如下问题：&quot; class=&quot;headerlink&quot; title=&quot;1.在使用命令：gi
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言的温故</title>
    <link href="http://yoursite.com/2018/11/13/C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B8%A9%E6%95%85/"/>
    <id>http://yoursite.com/2018/11/13/C语言的温故/</id>
    <published>2018-11-13T15:39:13.000Z</published>
    <updated>2019-04-06T02:36:58.515Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++知识点总结(1)</title>
    <link href="http://yoursite.com/2018/10/17/C++%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93(1)/"/>
    <id>http://yoursite.com/2018/10/17/C++知识点总结(1)/</id>
    <published>2018-10-17T08:58:04.000Z</published>
    <updated>2019-02-19T03:44:09.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识点一：函数重载："><a href="#知识点一：函数重载：" class="headerlink" title="知识点一：函数重载："></a>知识点一：函数重载：</h2><h3 id="1）特征："><a href="#1）特征：" class="headerlink" title="1）特征："></a>1）特征：</h3><pre><code> （1）函数名相同； （2）参数个数不同/参数类型不同（满足其一即可）（⚠️：返回值类型画与函数重载无关，函数返回值类型一致。）</code></pre><h3 id="2）本质："><a href="#2）本质：" class="headerlink" title="2）本质："></a>2）本质：</h3><ul><li>C++对重载函数的绑定是在编译阶段由编译器根据实际参数和形式参数的匹配情况来决定的， 编译器首先会为这一组重载函数中的每个函数取一个不同的内部名字。当发生函数调用时，编译器根据实际参数和形式参数的匹配情况确定具体调用哪个函数，用这个函数的内部函数名取代重载的函数名例如：如下代码中，编译器可能会为这4个max的函数取4个不同的内部名字。如：max2,max3,max4 。函数调用max(3,5)调用的是第一个max函数，编译器会将此调用改为max2(3,5),调用其他也是同样的情况。</li></ul><h3 id="3）demo："><a href="#3）demo：" class="headerlink" title="3）demo："></a>3）demo：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line"></div><div class="line">int max(int a1,int a2);</div><div class="line">int max(int a1,int a2,int a3);</div><div class="line">int max(float a1,float a2);</div><div class="line">int max(int a3,int a2,int a1 );</div><div class="line"></div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">   </div><div class="line">    cout &lt;&lt; &quot;max(3,5) is &quot; &lt;&lt; max(3,5) &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; &quot;max(3,5,4) is&quot; &lt;&lt; max(3,5,4) &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; &quot;max(3.2,5.2) is &quot; &lt;&lt; max(3.2,5.2) &lt;&lt; endl;</div><div class="line">   </div><div class="line">    return 0;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">int max(int a1,int a2) &#123;</div><div class="line">    return a1 &gt; a2 ? a1 : a2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int max(int a1,int a2,int a3) &#123;</div><div class="line">    </div><div class="line">    int tmp;</div><div class="line">    if(a1 &gt; a2) tmp = a1;else tmp = a2;</div><div class="line">    if (a3 &gt; tmp)  tmp = a3;</div><div class="line">    </div><div class="line">    return temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int max(float a1,float a2) &#123;</div><div class="line">    return a1 &gt; a2 ? a1 :a2;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行结果：<br>max(3,5) is 5<br>max(3,5,4) is5<br>max(3.2,5.2) is 5.2</p><h2 id="知识点二：关键字–extern"><a href="#知识点二：关键字–extern" class="headerlink" title="知识点二：关键字–extern"></a>知识点二：关键字–extern</h2><h3 id="1-基本解释："><a href="#1-基本解释：" class="headerlink" title="1)基本解释："></a>1)基本解释：</h3><ul><li>extern是计算机语言中的一个关键字，可置于变量或者函数前，以表示变量或者函数的定义在别的文件中。提示编译器遇到此变量或函数时，在其它模块中寻找其定义，另外，extern也可用来进行链接指定。—-来源百度百科</li><li><p>从extern的作用理解：</p><ul><li>（1）当extern与”C”一起连用时，如: extern “C” void fun(int a, int b);则告诉编译器在编译fun这个函数名时按着C的规则去翻译相应的函数名而不是C++的，C++的规则在翻译这个函数名时会把fun这个名字变得面目全非，可能是fun@aBc_int_int#%$也可能是别的，，因为C++支持函数的重载。</li><li><p>（2）当extern不与“C”连用，在修饰变量或函数时它的作用就是声明函数或全局变量的作用范围–即：可以在已经声明的模块中进行引用（它只是一个声明不是定义，声明只是说明该变量或函数如何使用，并无其他，比如声明的变量并不分配内存空间）。</p><p>V<br>vvv<br>vV</p></li></ul></li></ul><p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识点一：函数重载：&quot;&gt;&lt;a href=&quot;#知识点一：函数重载：&quot; class=&quot;headerlink&quot; title=&quot;知识点一：函数重载：&quot;&gt;&lt;/a&gt;知识点一：函数重载：&lt;/h2&gt;&lt;h3 id=&quot;1）特征：&quot;&gt;&lt;a href=&quot;#1）特征：&quot; class=&quot;he
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
</feed>
